//
//MIT License
//Copyright(c) 2020 Futurewei Cloud
//
//Permission is hereby granted,
//free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
//to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: schema.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion uint32                              `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	StateRequests []*HostRequest_ResourceStateRequest `protobuf:"bytes,2,rep,name=state_requests,json=stateRequests,proto3" json:"state_requests,omitempty"`
}

func (x *HostRequest) Reset() {
	*x = HostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequest) ProtoMessage() {}

func (x *HostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequest.ProtoReflect.Descriptor instead.
func (*HostRequest) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{0}
}

func (x *HostRequest) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *HostRequest) GetStateRequests() []*HostRequest_ResourceStateRequest {
	if x != nil {
		return x.StateRequests
	}
	return nil
}

type HostRequestReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion     uint32                                         `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	OperationStatuses []*HostRequestReply_HostRequestOperationStatus `protobuf:"bytes,2,rep,name=operation_statuses,json=operationStatuses,proto3" json:"operation_statuses,omitempty"`
	// Total operation time (in microseconds)
	TotalOperationTime uint32 `protobuf:"varint,3,opt,name=total_operation_time,json=totalOperationTime,proto3" json:"total_operation_time,omitempty"`
}

func (x *HostRequestReply) Reset() {
	*x = HostRequestReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequestReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequestReply) ProtoMessage() {}

func (x *HostRequestReply) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequestReply.ProtoReflect.Descriptor instead.
func (*HostRequestReply) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{1}
}

func (x *HostRequestReply) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *HostRequestReply) GetOperationStatuses() []*HostRequestReply_HostRequestOperationStatus {
	if x != nil {
		return x.OperationStatuses
	}
	return nil
}

func (x *HostRequestReply) GetTotalOperationTime() uint32 {
	if x != nil {
		return x.TotalOperationTime
	}
	return 0
}

type GoalStateOperationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion     uint32                                              `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	OperationStatuses []*GoalStateOperationReply_GoalStateOperationStatus `protobuf:"bytes,2,rep,name=operation_statuses,json=operationStatuses,proto3" json:"operation_statuses,omitempty"`
	// Total operation time (in microseconds)
	//    1. to process the message (consisting of multiple operations)
	//    2. to program data plane
	// Note: The list of operation_statuses details the time spent at each operation
	MessageTotalOperationTime uint32 `protobuf:"varint,3,opt,name=message_total_operation_time,json=messageTotalOperationTime,proto3" json:"message_total_operation_time,omitempty"`
}

func (x *GoalStateOperationReply) Reset() {
	*x = GoalStateOperationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStateOperationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStateOperationReply) ProtoMessage() {}

func (x *GoalStateOperationReply) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStateOperationReply.ProtoReflect.Descriptor instead.
func (*GoalStateOperationReply) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{2}
}

func (x *GoalStateOperationReply) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *GoalStateOperationReply) GetOperationStatuses() []*GoalStateOperationReply_GoalStateOperationStatus {
	if x != nil {
		return x.OperationStatuses
	}
	return nil
}

func (x *GoalStateOperationReply) GetMessageTotalOperationTime() uint32 {
	if x != nil {
		return x.MessageTotalOperationTime
	}
	return 0
}

type HostRequest_ResourceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType     RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=alcor.schema.RequestType" json:"request_type,omitempty"`
	RequestId       string      `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // UUID generated by ACA
	TunnelId        uint32      `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	SourceIp        string      `protobuf:"bytes,4,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty"`
	SourcePort      uint32      `protobuf:"varint,5,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationIp   string      `protobuf:"bytes,6,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	DestinationPort uint32      `protobuf:"varint,7,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Ethertype       EtherType   `protobuf:"varint,8,opt,name=ethertype,proto3,enum=alcor.schema.EtherType" json:"ethertype,omitempty"`
	Protocol        Protocol    `protobuf:"varint,9,opt,name=protocol,proto3,enum=alcor.schema.Protocol" json:"protocol,omitempty"`
}

func (x *HostRequest_ResourceStateRequest) Reset() {
	*x = HostRequest_ResourceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequest_ResourceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequest_ResourceStateRequest) ProtoMessage() {}

func (x *HostRequest_ResourceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequest_ResourceStateRequest.ProtoReflect.Descriptor instead.
func (*HostRequest_ResourceStateRequest) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HostRequest_ResourceStateRequest) GetRequestType() RequestType {
	if x != nil {
		return x.RequestType
	}
	return RequestType_ON_DEMAND
}

func (x *HostRequest_ResourceStateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HostRequest_ResourceStateRequest) GetTunnelId() uint32 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *HostRequest_ResourceStateRequest) GetSourceIp() string {
	if x != nil {
		return x.SourceIp
	}
	return ""
}

func (x *HostRequest_ResourceStateRequest) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *HostRequest_ResourceStateRequest) GetDestinationIp() string {
	if x != nil {
		return x.DestinationIp
	}
	return ""
}

func (x *HostRequest_ResourceStateRequest) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *HostRequest_ResourceStateRequest) GetEthertype() EtherType {
	if x != nil {
		return x.Ethertype
	}
	return EtherType_IPV4
}

func (x *HostRequest_ResourceStateRequest) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_TCP
}

type HostRequestReply_HostRequestOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       string          `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // UUID previously generated by ACA
	OperationStatus OperationStatus `protobuf:"varint,2,opt,name=operation_status,json=operationStatus,proto3,enum=alcor.schema.OperationStatus" json:"operation_status,omitempty"`
}

func (x *HostRequestReply_HostRequestOperationStatus) Reset() {
	*x = HostRequestReply_HostRequestOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequestReply_HostRequestOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequestReply_HostRequestOperationStatus) ProtoMessage() {}

func (x *HostRequestReply_HostRequestOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequestReply_HostRequestOperationStatus.ProtoReflect.Descriptor instead.
func (*HostRequestReply_HostRequestOperationStatus) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{1, 0}
}

func (x *HostRequestReply_HostRequestOperationStatus) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HostRequestReply_HostRequestOperationStatus) GetOperationStatus() OperationStatus {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_SUCCESS
}

type GoalStateOperationReply_GoalStateOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId               string          `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceType             ResourceType    `protobuf:"varint,2,opt,name=resource_type,json=resourceType,proto3,enum=alcor.schema.ResourceType" json:"resource_type,omitempty"`
	OperationType            OperationType   `protobuf:"varint,3,opt,name=operation_type,json=operationType,proto3,enum=alcor.schema.OperationType" json:"operation_type,omitempty"`
	OperationStatus          OperationStatus `protobuf:"varint,4,opt,name=operation_status,json=operationStatus,proto3,enum=alcor.schema.OperationStatus" json:"operation_status,omitempty"`
	DataplaneProgrammingTime uint32          `protobuf:"varint,5,opt,name=dataplane_programming_time,json=dataplaneProgrammingTime,proto3" json:"dataplane_programming_time,omitempty"`
	NetworkConfigurationTime uint32          `protobuf:"varint,6,opt,name=network_configuration_time,json=networkConfigurationTime,proto3" json:"network_configuration_time,omitempty"`
	StateElapseTime          uint32          `protobuf:"varint,7,opt,name=state_elapse_time,json=stateElapseTime,proto3" json:"state_elapse_time,omitempty"`
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) Reset() {
	*x = GoalStateOperationReply_GoalStateOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstateprovisioner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStateOperationReply_GoalStateOperationStatus) ProtoMessage() {}

func (x *GoalStateOperationReply_GoalStateOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_goalstateprovisioner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStateOperationReply_GoalStateOperationStatus.ProtoReflect.Descriptor instead.
func (*GoalStateOperationReply_GoalStateOperationStatus) Descriptor() ([]byte, []int) {
	return file_goalstateprovisioner_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetResourceType() ResourceType {
	if x != nil {
		return x.ResourceType
	}
	return ResourceType_VPC
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_INFO
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetOperationStatus() OperationStatus {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_SUCCESS
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetDataplaneProgrammingTime() uint32 {
	if x != nil {
		return x.DataplaneProgrammingTime
	}
	return 0
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetNetworkConfigurationTime() uint32 {
	if x != nil {
		return x.NetworkConfigurationTime
	}
	return 0
}

func (x *GoalStateOperationReply_GoalStateOperationStatus) GetStateElapseTime() uint32 {
	if x != nil {
		return x.StateElapseTime
	}
	return 0
}

var File_goalstateprovisioner_proto protoreflect.FileDescriptor

var file_goalstateprovisioner_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x04, 0x0a, 0x0b, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x8b, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x68, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x85, 0x01,
	0x0a, 0x1a, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x05, 0x0a, 0x17, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x6f, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xb2, 0x03, 0x0a, 0x18, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xa7, 0x02,
	0x0a, 0x14, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x19, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x25, 0x2e, 0x61,
	0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x1a, 0x25, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x6c, 0x63,
	0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x45, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goalstateprovisioner_proto_rawDescOnce sync.Once
	file_goalstateprovisioner_proto_rawDescData = file_goalstateprovisioner_proto_rawDesc
)

func file_goalstateprovisioner_proto_rawDescGZIP() []byte {
	file_goalstateprovisioner_proto_rawDescOnce.Do(func() {
		file_goalstateprovisioner_proto_rawDescData = protoimpl.X.CompressGZIP(file_goalstateprovisioner_proto_rawDescData)
	})
	return file_goalstateprovisioner_proto_rawDescData
}

var file_goalstateprovisioner_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_goalstateprovisioner_proto_goTypes = []interface{}{
	(*HostRequest)(nil),                                      // 0: alcor.schema.HostRequest
	(*HostRequestReply)(nil),                                 // 1: alcor.schema.HostRequestReply
	(*GoalStateOperationReply)(nil),                          // 2: alcor.schema.GoalStateOperationReply
	(*HostRequest_ResourceStateRequest)(nil),                 // 3: alcor.schema.HostRequest.ResourceStateRequest
	(*HostRequestReply_HostRequestOperationStatus)(nil),      // 4: alcor.schema.HostRequestReply.HostRequestOperationStatus
	(*GoalStateOperationReply_GoalStateOperationStatus)(nil), // 5: alcor.schema.GoalStateOperationReply.GoalStateOperationStatus
	(RequestType)(0),                                         // 6: alcor.schema.RequestType
	(EtherType)(0),                                           // 7: alcor.schema.EtherType
	(Protocol)(0),                                            // 8: alcor.schema.Protocol
	(OperationStatus)(0),                                     // 9: alcor.schema.OperationStatus
	(ResourceType)(0),                                        // 10: alcor.schema.ResourceType
	(OperationType)(0),                                       // 11: alcor.schema.OperationType
	(*GoalState)(nil),                                        // 12: alcor.schema.GoalState
	(*GoalStateV2)(nil),                                      // 13: alcor.schema.GoalStateV2
}
var file_goalstateprovisioner_proto_depIdxs = []int32{
	3,  // 0: alcor.schema.HostRequest.state_requests:type_name -> alcor.schema.HostRequest.ResourceStateRequest
	4,  // 1: alcor.schema.HostRequestReply.operation_statuses:type_name -> alcor.schema.HostRequestReply.HostRequestOperationStatus
	5,  // 2: alcor.schema.GoalStateOperationReply.operation_statuses:type_name -> alcor.schema.GoalStateOperationReply.GoalStateOperationStatus
	6,  // 3: alcor.schema.HostRequest.ResourceStateRequest.request_type:type_name -> alcor.schema.RequestType
	7,  // 4: alcor.schema.HostRequest.ResourceStateRequest.ethertype:type_name -> alcor.schema.EtherType
	8,  // 5: alcor.schema.HostRequest.ResourceStateRequest.protocol:type_name -> alcor.schema.Protocol
	9,  // 6: alcor.schema.HostRequestReply.HostRequestOperationStatus.operation_status:type_name -> alcor.schema.OperationStatus
	10, // 7: alcor.schema.GoalStateOperationReply.GoalStateOperationStatus.resource_type:type_name -> alcor.schema.ResourceType
	11, // 8: alcor.schema.GoalStateOperationReply.GoalStateOperationStatus.operation_type:type_name -> alcor.schema.OperationType
	9,  // 9: alcor.schema.GoalStateOperationReply.GoalStateOperationStatus.operation_status:type_name -> alcor.schema.OperationStatus
	12, // 10: alcor.schema.GoalStateProvisioner.PushNetworkResourceStates:input_type -> alcor.schema.GoalState
	13, // 11: alcor.schema.GoalStateProvisioner.PushGoalStatesStream:input_type -> alcor.schema.GoalStateV2
	0,  // 12: alcor.schema.GoalStateProvisioner.RequestGoalStates:input_type -> alcor.schema.HostRequest
	2,  // 13: alcor.schema.GoalStateProvisioner.PushNetworkResourceStates:output_type -> alcor.schema.GoalStateOperationReply
	2,  // 14: alcor.schema.GoalStateProvisioner.PushGoalStatesStream:output_type -> alcor.schema.GoalStateOperationReply
	1,  // 15: alcor.schema.GoalStateProvisioner.RequestGoalStates:output_type -> alcor.schema.HostRequestReply
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_goalstateprovisioner_proto_init() }
func file_goalstateprovisioner_proto_init() {
	if File_goalstateprovisioner_proto != nil {
		return
	}
	file_common_proto_init()
	file_goalstate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_goalstateprovisioner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstateprovisioner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequestReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstateprovisioner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStateOperationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstateprovisioner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequest_ResourceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstateprovisioner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequestReply_HostRequestOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstateprovisioner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStateOperationReply_GoalStateOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goalstateprovisioner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goalstateprovisioner_proto_goTypes,
		DependencyIndexes: file_goalstateprovisioner_proto_depIdxs,
		MessageInfos:      file_goalstateprovisioner_proto_msgTypes,
	}.Build()
	File_goalstateprovisioner_proto = out.File
	file_goalstateprovisioner_proto_rawDesc = nil
	file_goalstateprovisioner_proto_goTypes = nil
	file_goalstateprovisioner_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GoalStateProvisionerClient is the client API for GoalStateProvisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoalStateProvisionerClient interface {
	// Push a group of network resource states
	//
	// Input: a GoalState object consists of a list of operation requests, and each request contains an operation type and a resource configuration
	// Results consist of a list of operation statuses, and each status is a response to one operation request in the input
	//
	// Note: It is a NoOps for Control Agents when the operation type is INFO or GET.
	//       Use RetrieveNetworkResourceStates for state query.
	// this is for DPM->ACA
	PushNetworkResourceStates(ctx context.Context, in *GoalState, opts ...grpc.CallOption) (*GoalStateOperationReply, error)
	// similar to PushGoalStatesStream with streaming GoalStateV2 and streaming GoalStateOperationReply
	// this is for DPM->NCM, and NCM->ACA
	PushGoalStatesStream(ctx context.Context, opts ...grpc.CallOption) (GoalStateProvisioner_PushGoalStatesStreamClient, error)
	// Request goal states for ACA on-demand processing and also agent restart handling
	//
	// Input: a HostRequest object consists of a list of ResourceStateRequest, and each request contains a RequestType
	// Results consist of a list of HostRequestOperationStatus, and each status is a reply to each request in the input
	// this is for ACA->NCM
	RequestGoalStates(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostRequestReply, error)
}

type goalStateProvisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalStateProvisionerClient(cc grpc.ClientConnInterface) GoalStateProvisionerClient {
	return &goalStateProvisionerClient{cc}
}

func (c *goalStateProvisionerClient) PushNetworkResourceStates(ctx context.Context, in *GoalState, opts ...grpc.CallOption) (*GoalStateOperationReply, error) {
	out := new(GoalStateOperationReply)
	err := c.cc.Invoke(ctx, "/alcor.schema.GoalStateProvisioner/PushNetworkResourceStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalStateProvisionerClient) PushGoalStatesStream(ctx context.Context, opts ...grpc.CallOption) (GoalStateProvisioner_PushGoalStatesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GoalStateProvisioner_serviceDesc.Streams[0], "/alcor.schema.GoalStateProvisioner/PushGoalStatesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goalStateProvisionerPushGoalStatesStreamClient{stream}
	return x, nil
}

type GoalStateProvisioner_PushGoalStatesStreamClient interface {
	Send(*GoalStateV2) error
	Recv() (*GoalStateOperationReply, error)
	grpc.ClientStream
}

type goalStateProvisionerPushGoalStatesStreamClient struct {
	grpc.ClientStream
}

func (x *goalStateProvisionerPushGoalStatesStreamClient) Send(m *GoalStateV2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goalStateProvisionerPushGoalStatesStreamClient) Recv() (*GoalStateOperationReply, error) {
	m := new(GoalStateOperationReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goalStateProvisionerClient) RequestGoalStates(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostRequestReply, error) {
	out := new(HostRequestReply)
	err := c.cc.Invoke(ctx, "/alcor.schema.GoalStateProvisioner/RequestGoalStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalStateProvisionerServer is the server API for GoalStateProvisioner service.
type GoalStateProvisionerServer interface {
	// Push a group of network resource states
	//
	// Input: a GoalState object consists of a list of operation requests, and each request contains an operation type and a resource configuration
	// Results consist of a list of operation statuses, and each status is a response to one operation request in the input
	//
	// Note: It is a NoOps for Control Agents when the operation type is INFO or GET.
	//       Use RetrieveNetworkResourceStates for state query.
	// this is for DPM->ACA
	PushNetworkResourceStates(context.Context, *GoalState) (*GoalStateOperationReply, error)
	// similar to PushGoalStatesStream with streaming GoalStateV2 and streaming GoalStateOperationReply
	// this is for DPM->NCM, and NCM->ACA
	PushGoalStatesStream(GoalStateProvisioner_PushGoalStatesStreamServer) error
	// Request goal states for ACA on-demand processing and also agent restart handling
	//
	// Input: a HostRequest object consists of a list of ResourceStateRequest, and each request contains a RequestType
	// Results consist of a list of HostRequestOperationStatus, and each status is a reply to each request in the input
	// this is for ACA->NCM
	RequestGoalStates(context.Context, *HostRequest) (*HostRequestReply, error)
}

// UnimplementedGoalStateProvisionerServer can be embedded to have forward compatible implementations.
type UnimplementedGoalStateProvisionerServer struct {
}

func (*UnimplementedGoalStateProvisionerServer) PushNetworkResourceStates(context.Context, *GoalState) (*GoalStateOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNetworkResourceStates not implemented")
}
func (*UnimplementedGoalStateProvisionerServer) PushGoalStatesStream(GoalStateProvisioner_PushGoalStatesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushGoalStatesStream not implemented")
}
func (*UnimplementedGoalStateProvisionerServer) RequestGoalStates(context.Context, *HostRequest) (*HostRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGoalStates not implemented")
}

func RegisterGoalStateProvisionerServer(s *grpc.Server, srv GoalStateProvisionerServer) {
	s.RegisterService(&_GoalStateProvisioner_serviceDesc, srv)
}

func _GoalStateProvisioner_PushNetworkResourceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoalState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalStateProvisionerServer).PushNetworkResourceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alcor.schema.GoalStateProvisioner/PushNetworkResourceStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalStateProvisionerServer).PushNetworkResourceStates(ctx, req.(*GoalState))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoalStateProvisioner_PushGoalStatesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoalStateProvisionerServer).PushGoalStatesStream(&goalStateProvisionerPushGoalStatesStreamServer{stream})
}

type GoalStateProvisioner_PushGoalStatesStreamServer interface {
	Send(*GoalStateOperationReply) error
	Recv() (*GoalStateV2, error)
	grpc.ServerStream
}

type goalStateProvisionerPushGoalStatesStreamServer struct {
	grpc.ServerStream
}

func (x *goalStateProvisionerPushGoalStatesStreamServer) Send(m *GoalStateOperationReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goalStateProvisionerPushGoalStatesStreamServer) Recv() (*GoalStateV2, error) {
	m := new(GoalStateV2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GoalStateProvisioner_RequestGoalStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalStateProvisionerServer).RequestGoalStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alcor.schema.GoalStateProvisioner/RequestGoalStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalStateProvisionerServer).RequestGoalStates(ctx, req.(*HostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoalStateProvisioner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alcor.schema.GoalStateProvisioner",
	HandlerType: (*GoalStateProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNetworkResourceStates",
			Handler:    _GoalStateProvisioner_PushNetworkResourceStates_Handler,
		},
		{
			MethodName: "RequestGoalStates",
			Handler:    _GoalStateProvisioner_RequestGoalStates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushGoalStatesStream",
			Handler:       _GoalStateProvisioner_PushGoalStatesStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "schema.proto",
}
