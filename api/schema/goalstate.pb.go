//
//MIT License
//Copyright(c) 2020 Futurewei Cloud
//
//Permission is hereby granted,
//free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
//to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: goalstate.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion       uint32                `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	VpcStates           []*VpcState           `protobuf:"bytes,2,rep,name=vpc_states,json=vpcStates,proto3" json:"vpc_states,omitempty"`
	SubnetStates        []*SubnetState        `protobuf:"bytes,3,rep,name=subnet_states,json=subnetStates,proto3" json:"subnet_states,omitempty"`
	PortStates          []*PortState          `protobuf:"bytes,4,rep,name=port_states,json=portStates,proto3" json:"port_states,omitempty"`
	NeighborStates      []*NeighborState      `protobuf:"bytes,5,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty"`
	SecurityGroupStates []*SecurityGroupState `protobuf:"bytes,6,rep,name=security_group_states,json=securityGroupStates,proto3" json:"security_group_states,omitempty"`
	DhcpStates          []*DHCPState          `protobuf:"bytes,7,rep,name=dhcp_states,json=dhcpStates,proto3" json:"dhcp_states,omitempty"`
	RouterStates        []*RouterState        `protobuf:"bytes,8,rep,name=router_states,json=routerStates,proto3" json:"router_states,omitempty"`
	GatewayStates       []*GatewayState       `protobuf:"bytes,9,rep,name=gateway_states,json=gatewayStates,proto3" json:"gateway_states,omitempty"`
}

func (x *GoalState) Reset() {
	*x = GoalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalState) ProtoMessage() {}

func (x *GoalState) ProtoReflect() protoreflect.Message {
	mi := &file_goalstate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalState.ProtoReflect.Descriptor instead.
func (*GoalState) Descriptor() ([]byte, []int) {
	return file_goalstate_proto_rawDescGZIP(), []int{0}
}

func (x *GoalState) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *GoalState) GetVpcStates() []*VpcState {
	if x != nil {
		return x.VpcStates
	}
	return nil
}

func (x *GoalState) GetSubnetStates() []*SubnetState {
	if x != nil {
		return x.SubnetStates
	}
	return nil
}

func (x *GoalState) GetPortStates() []*PortState {
	if x != nil {
		return x.PortStates
	}
	return nil
}

func (x *GoalState) GetNeighborStates() []*NeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

func (x *GoalState) GetSecurityGroupStates() []*SecurityGroupState {
	if x != nil {
		return x.SecurityGroupStates
	}
	return nil
}

func (x *GoalState) GetDhcpStates() []*DHCPState {
	if x != nil {
		return x.DhcpStates
	}
	return nil
}

func (x *GoalState) GetRouterStates() []*RouterState {
	if x != nil {
		return x.RouterStates
	}
	return nil
}

func (x *GoalState) GetGatewayStates() []*GatewayState {
	if x != nil {
		return x.GatewayStates
	}
	return nil
}

type ResourceIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ResourceType `protobuf:"varint,1,opt,name=type,proto3,enum=alcor.schema.ResourceType" json:"type,omitempty"`
	Id   string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResourceIdType) Reset() {
	*x = ResourceIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceIdType) ProtoMessage() {}

func (x *ResourceIdType) ProtoReflect() protoreflect.Message {
	mi := &file_goalstate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceIdType.ProtoReflect.Descriptor instead.
func (*ResourceIdType) Descriptor() ([]byte, []int) {
	return file_goalstate_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceIdType) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_VPC
}

func (x *ResourceIdType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HostResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*ResourceIdType `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *HostResources) Reset() {
	*x = HostResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResources) ProtoMessage() {}

func (x *HostResources) ProtoReflect() protoreflect.Message {
	mi := &file_goalstate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResources.ProtoReflect.Descriptor instead.
func (*HostResources) Descriptor() ([]byte, []int) {
	return file_goalstate_proto_rawDescGZIP(), []int{2}
}

func (x *HostResources) GetResources() []*ResourceIdType {
	if x != nil {
		return x.Resources
	}
	return nil
}

type GoalStateV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatVersion uint32                    `protobuf:"varint,1,opt,name=format_version,json=formatVersion,proto3" json:"format_version,omitempty"`
	HostResources map[string]*HostResources `protobuf:"bytes,2,rep,name=host_resources,json=hostResources,proto3" json:"host_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VpcStates     map[string]*VpcState      `protobuf:"bytes,3,rep,name=vpc_states,json=vpcStates,proto3" json:"vpc_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubnetStates  map[string]*SubnetState   `protobuf:"bytes,4,rep,name=subnet_states,json=subnetStates,proto3" json:"subnet_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// PortState and DHCPState is applicable to one host only
	PortStates          map[string]*PortState          `protobuf:"bytes,5,rep,name=port_states,json=portStates,proto3" json:"port_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DhcpStates          map[string]*DHCPState          `protobuf:"bytes,6,rep,name=dhcp_states,json=dhcpStates,proto3" json:"dhcp_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NeighborStates      map[string]*NeighborState      `protobuf:"bytes,7,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecurityGroupStates map[string]*SecurityGroupState `protobuf:"bytes,8,rep,name=security_group_states,json=securityGroupStates,proto3" json:"security_group_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RouterStates        map[string]*RouterState        `protobuf:"bytes,9,rep,name=router_states,json=routerStates,proto3" json:"router_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GatewayStates       map[string]*GatewayState       `protobuf:"bytes,10,rep,name=gateway_states,json=gatewayStates,proto3" json:"gateway_states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GoalStateV2) Reset() {
	*x = GoalStateV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goalstate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalStateV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalStateV2) ProtoMessage() {}

func (x *GoalStateV2) ProtoReflect() protoreflect.Message {
	mi := &file_goalstate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalStateV2.ProtoReflect.Descriptor instead.
func (*GoalStateV2) Descriptor() ([]byte, []int) {
	return file_goalstate_proto_rawDescGZIP(), []int{3}
}

func (x *GoalStateV2) GetFormatVersion() uint32 {
	if x != nil {
		return x.FormatVersion
	}
	return 0
}

func (x *GoalStateV2) GetHostResources() map[string]*HostResources {
	if x != nil {
		return x.HostResources
	}
	return nil
}

func (x *GoalStateV2) GetVpcStates() map[string]*VpcState {
	if x != nil {
		return x.VpcStates
	}
	return nil
}

func (x *GoalStateV2) GetSubnetStates() map[string]*SubnetState {
	if x != nil {
		return x.SubnetStates
	}
	return nil
}

func (x *GoalStateV2) GetPortStates() map[string]*PortState {
	if x != nil {
		return x.PortStates
	}
	return nil
}

func (x *GoalStateV2) GetDhcpStates() map[string]*DHCPState {
	if x != nil {
		return x.DhcpStates
	}
	return nil
}

func (x *GoalStateV2) GetNeighborStates() map[string]*NeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

func (x *GoalStateV2) GetSecurityGroupStates() map[string]*SecurityGroupState {
	if x != nil {
		return x.SecurityGroupStates
	}
	return nil
}

func (x *GoalStateV2) GetRouterStates() map[string]*RouterState {
	if x != nil {
		return x.RouterStates
	}
	return nil
}

func (x *GoalStateV2) GetGatewayStates() map[string]*GatewayState {
	if x != nil {
		return x.GatewayStates
	}
	return nil
}

var File_goalstate_proto protoreflect.FileDescriptor

var file_goalstate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x76,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbc, 0x04, 0x0a, 0x09, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x76, 0x70, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x63, 0x6f,
	0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x76, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x15,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x48, 0x43, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x50, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xe8,
	0x0c, 0x0a, 0x0b, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x68, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x76, 0x70,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6c, 0x63,
	0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6c, 0x63,
	0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x56, 0x32, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x32, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56,
	0x32, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x32, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x56, 0x32, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x0e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x63, 0x6f,
	0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a,
	0x0f, 0x44, 0x68, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x44, 0x48, 0x43, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x13, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5a, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x12, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x45, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goalstate_proto_rawDescOnce sync.Once
	file_goalstate_proto_rawDescData = file_goalstate_proto_rawDesc
)

func file_goalstate_proto_rawDescGZIP() []byte {
	file_goalstate_proto_rawDescOnce.Do(func() {
		file_goalstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_goalstate_proto_rawDescData)
	})
	return file_goalstate_proto_rawDescData
}

var file_goalstate_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_goalstate_proto_goTypes = []interface{}{
	(*GoalState)(nil),          // 0: alcor.schema.GoalState
	(*ResourceIdType)(nil),     // 1: alcor.schema.ResourceIdType
	(*HostResources)(nil),      // 2: alcor.schema.HostResources
	(*GoalStateV2)(nil),        // 3: alcor.schema.GoalStateV2
	nil,                        // 4: alcor.schema.GoalStateV2.HostResourcesEntry
	nil,                        // 5: alcor.schema.GoalStateV2.VpcStatesEntry
	nil,                        // 6: alcor.schema.GoalStateV2.SubnetStatesEntry
	nil,                        // 7: alcor.schema.GoalStateV2.PortStatesEntry
	nil,                        // 8: alcor.schema.GoalStateV2.DhcpStatesEntry
	nil,                        // 9: alcor.schema.GoalStateV2.NeighborStatesEntry
	nil,                        // 10: alcor.schema.GoalStateV2.SecurityGroupStatesEntry
	nil,                        // 11: alcor.schema.GoalStateV2.RouterStatesEntry
	nil,                        // 12: alcor.schema.GoalStateV2.GatewayStatesEntry
	(*VpcState)(nil),           // 13: alcor.schema.VpcState
	(*SubnetState)(nil),        // 14: alcor.schema.SubnetState
	(*PortState)(nil),          // 15: alcor.schema.PortState
	(*NeighborState)(nil),      // 16: alcor.schema.NeighborState
	(*SecurityGroupState)(nil), // 17: alcor.schema.SecurityGroupState
	(*DHCPState)(nil),          // 18: alcor.schema.DHCPState
	(*RouterState)(nil),        // 19: alcor.schema.RouterState
	(*GatewayState)(nil),       // 20: alcor.schema.GatewayState
	(ResourceType)(0),          // 21: alcor.schema.ResourceType
}
var file_goalstate_proto_depIdxs = []int32{
	13, // 0: alcor.schema.GoalState.vpc_states:type_name -> alcor.schema.VpcState
	14, // 1: alcor.schema.GoalState.subnet_states:type_name -> alcor.schema.SubnetState
	15, // 2: alcor.schema.GoalState.port_states:type_name -> alcor.schema.PortState
	16, // 3: alcor.schema.GoalState.neighbor_states:type_name -> alcor.schema.NeighborState
	17, // 4: alcor.schema.GoalState.security_group_states:type_name -> alcor.schema.SecurityGroupState
	18, // 5: alcor.schema.GoalState.dhcp_states:type_name -> alcor.schema.DHCPState
	19, // 6: alcor.schema.GoalState.router_states:type_name -> alcor.schema.RouterState
	20, // 7: alcor.schema.GoalState.gateway_states:type_name -> alcor.schema.GatewayState
	21, // 8: alcor.schema.ResourceIdType.type:type_name -> alcor.schema.ResourceType
	1,  // 9: alcor.schema.HostResources.resources:type_name -> alcor.schema.ResourceIdType
	4,  // 10: alcor.schema.GoalStateV2.host_resources:type_name -> alcor.schema.GoalStateV2.HostResourcesEntry
	5,  // 11: alcor.schema.GoalStateV2.vpc_states:type_name -> alcor.schema.GoalStateV2.VpcStatesEntry
	6,  // 12: alcor.schema.GoalStateV2.subnet_states:type_name -> alcor.schema.GoalStateV2.SubnetStatesEntry
	7,  // 13: alcor.schema.GoalStateV2.port_states:type_name -> alcor.schema.GoalStateV2.PortStatesEntry
	8,  // 14: alcor.schema.GoalStateV2.dhcp_states:type_name -> alcor.schema.GoalStateV2.DhcpStatesEntry
	9,  // 15: alcor.schema.GoalStateV2.neighbor_states:type_name -> alcor.schema.GoalStateV2.NeighborStatesEntry
	10, // 16: alcor.schema.GoalStateV2.security_group_states:type_name -> alcor.schema.GoalStateV2.SecurityGroupStatesEntry
	11, // 17: alcor.schema.GoalStateV2.router_states:type_name -> alcor.schema.GoalStateV2.RouterStatesEntry
	12, // 18: alcor.schema.GoalStateV2.gateway_states:type_name -> alcor.schema.GoalStateV2.GatewayStatesEntry
	2,  // 19: alcor.schema.GoalStateV2.HostResourcesEntry.value:type_name -> alcor.schema.HostResources
	13, // 20: alcor.schema.GoalStateV2.VpcStatesEntry.value:type_name -> alcor.schema.VpcState
	14, // 21: alcor.schema.GoalStateV2.SubnetStatesEntry.value:type_name -> alcor.schema.SubnetState
	15, // 22: alcor.schema.GoalStateV2.PortStatesEntry.value:type_name -> alcor.schema.PortState
	18, // 23: alcor.schema.GoalStateV2.DhcpStatesEntry.value:type_name -> alcor.schema.DHCPState
	16, // 24: alcor.schema.GoalStateV2.NeighborStatesEntry.value:type_name -> alcor.schema.NeighborState
	17, // 25: alcor.schema.GoalStateV2.SecurityGroupStatesEntry.value:type_name -> alcor.schema.SecurityGroupState
	19, // 26: alcor.schema.GoalStateV2.RouterStatesEntry.value:type_name -> alcor.schema.RouterState
	20, // 27: alcor.schema.GoalStateV2.GatewayStatesEntry.value:type_name -> alcor.schema.GatewayState
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_goalstate_proto_init() }
func file_goalstate_proto_init() {
	if File_goalstate_proto != nil {
		return
	}
	file_common_proto_init()
	file_vpc_proto_init()
	file_subnet_proto_init()
	file_port_proto_init()
	file_neighbor_proto_init()
	file_securitygroup_proto_init()
	file_dhcp_proto_init()
	file_router_proto_init()
	file_gateway_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_goalstate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goalstate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalStateV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goalstate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goalstate_proto_goTypes,
		DependencyIndexes: file_goalstate_proto_depIdxs,
		MessageInfos:      file_goalstate_proto_msgTypes,
	}.Build()
	File_goalstate_proto = out.File
	file_goalstate_proto_rawDesc = nil
	file_goalstate_proto_goTypes = nil
	file_goalstate_proto_depIdxs = nil
}
