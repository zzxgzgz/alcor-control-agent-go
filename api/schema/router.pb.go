//
//MIT License
//Copyright(c) 2020 Futurewei Cloud
//
//Permission is hereby granted,
//free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
//to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: router.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DestinationType int32

const (
	DestinationType_INTERNET DestinationType = 0
	DestinationType_VPC_GW   DestinationType = 1
)

// Enum value maps for DestinationType.
var (
	DestinationType_name = map[int32]string{
		0: "INTERNET",
		1: "VPC_GW",
	}
	DestinationType_value = map[string]int32{
		"INTERNET": 0,
		"VPC_GW":   1,
	}
)

func (x DestinationType) Enum() *DestinationType {
	p := new(DestinationType)
	*p = x
	return p
}

func (x DestinationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestinationType) Descriptor() protoreflect.EnumDescriptor {
	return file_router_proto_enumTypes[0].Descriptor()
}

func (DestinationType) Type() protoreflect.EnumType {
	return &file_router_proto_enumTypes[0]
}

func (x DestinationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestinationType.Descriptor instead.
func (DestinationType) EnumDescriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

type RouterConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevisionNumber      uint32                                    `protobuf:"varint,1,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	RequestId           string                                    `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Id                  string                                    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UpdateType          UpdateType                                `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=alcor.schema.UpdateType" json:"update_type,omitempty"` // DELTA (default) or FULL
	HostDvrMacAddress   string                                    `protobuf:"bytes,5,opt,name=host_dvr_mac_address,json=hostDvrMacAddress,proto3" json:"host_dvr_mac_address,omitempty"`
	SubnetRoutingTables []*RouterConfiguration_SubnetRoutingTable `protobuf:"bytes,6,rep,name=subnet_routing_tables,json=subnetRoutingTables,proto3" json:"subnet_routing_tables,omitempty"`
}

func (x *RouterConfiguration) Reset() {
	*x = RouterConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfiguration) ProtoMessage() {}

func (x *RouterConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfiguration.ProtoReflect.Descriptor instead.
func (*RouterConfiguration) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

func (x *RouterConfiguration) GetRevisionNumber() uint32 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *RouterConfiguration) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RouterConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouterConfiguration) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_DELTA
}

func (x *RouterConfiguration) GetHostDvrMacAddress() string {
	if x != nil {
		return x.HostDvrMacAddress
	}
	return ""
}

func (x *RouterConfiguration) GetSubnetRoutingTables() []*RouterConfiguration_SubnetRoutingTable {
	if x != nil {
		return x.SubnetRoutingTables
	}
	return nil
}

type RouterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType OperationType        `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=alcor.schema.OperationType" json:"operation_type,omitempty"`
	Configuration *RouterConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *RouterState) Reset() {
	*x = RouterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterState) ProtoMessage() {}

func (x *RouterState) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterState.ProtoReflect.Descriptor instead.
func (*RouterState) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{1}
}

func (x *RouterState) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_INFO
}

func (x *RouterState) GetConfiguration() *RouterConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type RouterConfiguration_RoutingRuleExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationType DestinationType `protobuf:"varint,1,opt,name=destination_type,json=destinationType,proto3,enum=alcor.schema.DestinationType" json:"destination_type,omitempty"`
	NextHopMac      string          `protobuf:"bytes,2,opt,name=next_hop_mac,json=nextHopMac,proto3" json:"next_hop_mac,omitempty"`
}

func (x *RouterConfiguration_RoutingRuleExtraInfo) Reset() {
	*x = RouterConfiguration_RoutingRuleExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfiguration_RoutingRuleExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfiguration_RoutingRuleExtraInfo) ProtoMessage() {}

func (x *RouterConfiguration_RoutingRuleExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfiguration_RoutingRuleExtraInfo.ProtoReflect.Descriptor instead.
func (*RouterConfiguration_RoutingRuleExtraInfo) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RouterConfiguration_RoutingRuleExtraInfo) GetDestinationType() DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return DestinationType_INTERNET
}

func (x *RouterConfiguration_RoutingRuleExtraInfo) GetNextHopMac() string {
	if x != nil {
		return x.NextHopMac
	}
	return ""
}

type RouterConfiguration_RoutingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType        OperationType                             `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=alcor.schema.OperationType" json:"operation_type,omitempty"`
	Id                   string                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Destination          string                                    `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"` // destination IP, could be 154.12.42.24/32 (host address) or 0.0.0.0/0 (network address)
	NextHopIp            string                                    `protobuf:"bytes,5,opt,name=next_hop_ip,json=nextHopIp,proto3" json:"next_hop_ip,omitempty"`
	Priority             uint32                                    `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	RoutingRuleExtraInfo *RouterConfiguration_RoutingRuleExtraInfo `protobuf:"bytes,7,opt,name=routing_rule_extra_info,json=routingRuleExtraInfo,proto3" json:"routing_rule_extra_info,omitempty"`
}

func (x *RouterConfiguration_RoutingRule) Reset() {
	*x = RouterConfiguration_RoutingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfiguration_RoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfiguration_RoutingRule) ProtoMessage() {}

func (x *RouterConfiguration_RoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfiguration_RoutingRule.ProtoReflect.Descriptor instead.
func (*RouterConfiguration_RoutingRule) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RouterConfiguration_RoutingRule) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_INFO
}

func (x *RouterConfiguration_RoutingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouterConfiguration_RoutingRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouterConfiguration_RoutingRule) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RouterConfiguration_RoutingRule) GetNextHopIp() string {
	if x != nil {
		return x.NextHopIp
	}
	return ""
}

func (x *RouterConfiguration_RoutingRule) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RouterConfiguration_RoutingRule) GetRoutingRuleExtraInfo() *RouterConfiguration_RoutingRuleExtraInfo {
	if x != nil {
		return x.RoutingRuleExtraInfo
	}
	return nil
}

type RouterConfiguration_SubnetRoutingTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId     string                             `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	RoutingRules []*RouterConfiguration_RoutingRule `protobuf:"bytes,2,rep,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"`
}

func (x *RouterConfiguration_SubnetRoutingTable) Reset() {
	*x = RouterConfiguration_SubnetRoutingTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfiguration_SubnetRoutingTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfiguration_SubnetRoutingTable) ProtoMessage() {}

func (x *RouterConfiguration_SubnetRoutingTable) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfiguration_SubnetRoutingTable.ProtoReflect.Descriptor instead.
func (*RouterConfiguration_SubnetRoutingTable) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RouterConfiguration_SubnetRoutingTable) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *RouterConfiguration_SubnetRoutingTable) GetRoutingRules() []*RouterConfiguration_RoutingRule {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

var File_router_proto protoreflect.FileDescriptor

var file_router_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x07, 0x0a, 0x13, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x76,
	0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x76, 0x72, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x1a, 0x82, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4d, 0x61, 0x63, 0x1a, 0xc2, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x17, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61,
	0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x85, 0x01, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x52,
	0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x63,
	0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x2b, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x50, 0x43, 0x5f, 0x47, 0x57, 0x10, 0x01, 0x42, 0x4d, 0x0a, 0x1a,
	0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2e, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x6c, 0x63, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_router_proto_rawDescOnce sync.Once
	file_router_proto_rawDescData = file_router_proto_rawDesc
)

func file_router_proto_rawDescGZIP() []byte {
	file_router_proto_rawDescOnce.Do(func() {
		file_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_proto_rawDescData)
	})
	return file_router_proto_rawDescData
}

var file_router_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_router_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_router_proto_goTypes = []interface{}{
	(DestinationType)(0),                             // 0: alcor.schema.DestinationType
	(*RouterConfiguration)(nil),                      // 1: alcor.schema.RouterConfiguration
	(*RouterState)(nil),                              // 2: alcor.schema.RouterState
	(*RouterConfiguration_RoutingRuleExtraInfo)(nil), // 3: alcor.schema.RouterConfiguration.RoutingRuleExtraInfo
	(*RouterConfiguration_RoutingRule)(nil),          // 4: alcor.schema.RouterConfiguration.RoutingRule
	(*RouterConfiguration_SubnetRoutingTable)(nil),   // 5: alcor.schema.RouterConfiguration.SubnetRoutingTable
	(UpdateType)(0),                                  // 6: alcor.schema.UpdateType
	(OperationType)(0),                               // 7: alcor.schema.OperationType
}
var file_router_proto_depIdxs = []int32{
	6, // 0: alcor.schema.RouterConfiguration.update_type:type_name -> alcor.schema.UpdateType
	5, // 1: alcor.schema.RouterConfiguration.subnet_routing_tables:type_name -> alcor.schema.RouterConfiguration.SubnetRoutingTable
	7, // 2: alcor.schema.RouterState.operation_type:type_name -> alcor.schema.OperationType
	1, // 3: alcor.schema.RouterState.configuration:type_name -> alcor.schema.RouterConfiguration
	0, // 4: alcor.schema.RouterConfiguration.RoutingRuleExtraInfo.destination_type:type_name -> alcor.schema.DestinationType
	7, // 5: alcor.schema.RouterConfiguration.RoutingRule.operation_type:type_name -> alcor.schema.OperationType
	3, // 6: alcor.schema.RouterConfiguration.RoutingRule.routing_rule_extra_info:type_name -> alcor.schema.RouterConfiguration.RoutingRuleExtraInfo
	4, // 7: alcor.schema.RouterConfiguration.SubnetRoutingTable.routing_rules:type_name -> alcor.schema.RouterConfiguration.RoutingRule
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_router_proto_init() }
func file_router_proto_init() {
	if File_router_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfiguration_RoutingRuleExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfiguration_RoutingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfiguration_SubnetRoutingTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_router_proto_goTypes,
		DependencyIndexes: file_router_proto_depIdxs,
		EnumInfos:         file_router_proto_enumTypes,
		MessageInfos:      file_router_proto_msgTypes,
	}.Build()
	File_router_proto = out.File
	file_router_proto_rawDesc = nil
	file_router_proto_goTypes = nil
	file_router_proto_depIdxs = nil
}
