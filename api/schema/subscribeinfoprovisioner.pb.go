//
//MIT License
//Copyright(c) 2020 Futurewei Cloud
//
//Permission is hereby granted,
//free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
//to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: subscribeinfoprovisioner.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeOperation int32

const (
	SubscribeOperation_Subscribe   SubscribeOperation = 0
	SubscribeOperation_Unsubscribe SubscribeOperation = 1
)

// Enum value maps for SubscribeOperation.
var (
	SubscribeOperation_name = map[int32]string{
		0: "Subscribe",
		1: "Unsubscribe",
	}
	SubscribeOperation_value = map[string]int32{
		"Subscribe":   0,
		"Unsubscribe": 1,
	}
)

func (x SubscribeOperation) Enum() *SubscribeOperation {
	p := new(SubscribeOperation)
	*p = x
	return p
}

func (x SubscribeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_subscribeinfoprovisioner_proto_enumTypes[0].Descriptor()
}

func (SubscribeOperation) Type() protoreflect.EnumType {
	return &file_subscribeinfoprovisioner_proto_enumTypes[0]
}

func (x SubscribeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeOperation.Descriptor instead.
func (SubscribeOperation) EnumDescriptor() ([]byte, []int) {
	return file_subscribeinfoprovisioner_proto_rawDescGZIP(), []int{0}
}

type NodeSubscribeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeOperation SubscribeOperation `protobuf:"varint,1,opt,name=subscribe_operation,json=subscribeOperation,proto3,enum=alcor.schema.SubscribeOperation" json:"subscribe_operation,omitempty"`
	Topic              string             `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Key                string             `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *NodeSubscribeInfo) Reset() {
	*x = NodeSubscribeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscribeinfoprovisioner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSubscribeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSubscribeInfo) ProtoMessage() {}

func (x *NodeSubscribeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_subscribeinfoprovisioner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSubscribeInfo.ProtoReflect.Descriptor instead.
func (*NodeSubscribeInfo) Descriptor() ([]byte, []int) {
	return file_subscribeinfoprovisioner_proto_rawDescGZIP(), []int{0}
}

func (x *NodeSubscribeInfo) GetSubscribeOperation() SubscribeOperation {
	if x != nil {
		return x.SubscribeOperation
	}
	return SubscribeOperation_Subscribe
}

func (x *NodeSubscribeInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *NodeSubscribeInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type SubscribeOperationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationStatus OperationStatus `protobuf:"varint,1,opt,name=operationStatus,proto3,enum=alcor.schema.OperationStatus" json:"operationStatus,omitempty"`
}

func (x *SubscribeOperationReply) Reset() {
	*x = SubscribeOperationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscribeinfoprovisioner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOperationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOperationReply) ProtoMessage() {}

func (x *SubscribeOperationReply) ProtoReflect() protoreflect.Message {
	mi := &file_subscribeinfoprovisioner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOperationReply.ProtoReflect.Descriptor instead.
func (*SubscribeOperationReply) Descriptor() ([]byte, []int) {
	return file_subscribeinfoprovisioner_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeOperationReply) GetOperationStatus() OperationStatus {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_SUCCESS
}

var File_subscribeinfoprovisioner_proto protoreflect.FileDescriptor

var file_subscribeinfoprovisioner_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a,
	0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x62, 0x0a,
	0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2a, 0x34, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x01, 0x32, 0x7d, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x61,
	0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x25, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x45, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscribeinfoprovisioner_proto_rawDescOnce sync.Once
	file_subscribeinfoprovisioner_proto_rawDescData = file_subscribeinfoprovisioner_proto_rawDesc
)

func file_subscribeinfoprovisioner_proto_rawDescGZIP() []byte {
	file_subscribeinfoprovisioner_proto_rawDescOnce.Do(func() {
		file_subscribeinfoprovisioner_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscribeinfoprovisioner_proto_rawDescData)
	})
	return file_subscribeinfoprovisioner_proto_rawDescData
}

var file_subscribeinfoprovisioner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subscribeinfoprovisioner_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_subscribeinfoprovisioner_proto_goTypes = []interface{}{
	(SubscribeOperation)(0),         // 0: alcor.schema.SubscribeOperation
	(*NodeSubscribeInfo)(nil),       // 1: alcor.schema.NodeSubscribeInfo
	(*SubscribeOperationReply)(nil), // 2: alcor.schema.SubscribeOperationReply
	(OperationStatus)(0),            // 3: alcor.schema.OperationStatus
}
var file_subscribeinfoprovisioner_proto_depIdxs = []int32{
	0, // 0: alcor.schema.NodeSubscribeInfo.subscribe_operation:type_name -> alcor.schema.SubscribeOperation
	3, // 1: alcor.schema.SubscribeOperationReply.operationStatus:type_name -> alcor.schema.OperationStatus
	1, // 2: alcor.schema.SubscribeInfoProvisioner.PushNodeSubscribeInfo:input_type -> alcor.schema.NodeSubscribeInfo
	2, // 3: alcor.schema.SubscribeInfoProvisioner.PushNodeSubscribeInfo:output_type -> alcor.schema.SubscribeOperationReply
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_subscribeinfoprovisioner_proto_init() }
func file_subscribeinfoprovisioner_proto_init() {
	if File_subscribeinfoprovisioner_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_subscribeinfoprovisioner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSubscribeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscribeinfoprovisioner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOperationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscribeinfoprovisioner_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscribeinfoprovisioner_proto_goTypes,
		DependencyIndexes: file_subscribeinfoprovisioner_proto_depIdxs,
		EnumInfos:         file_subscribeinfoprovisioner_proto_enumTypes,
		MessageInfos:      file_subscribeinfoprovisioner_proto_msgTypes,
	}.Build()
	File_subscribeinfoprovisioner_proto = out.File
	file_subscribeinfoprovisioner_proto_rawDesc = nil
	file_subscribeinfoprovisioner_proto_goTypes = nil
	file_subscribeinfoprovisioner_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SubscribeInfoProvisionerClient is the client API for SubscribeInfoProvisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeInfoProvisionerClient interface {
	PushNodeSubscribeInfo(ctx context.Context, in *NodeSubscribeInfo, opts ...grpc.CallOption) (*SubscribeOperationReply, error)
}

type subscribeInfoProvisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeInfoProvisionerClient(cc grpc.ClientConnInterface) SubscribeInfoProvisionerClient {
	return &subscribeInfoProvisionerClient{cc}
}

func (c *subscribeInfoProvisionerClient) PushNodeSubscribeInfo(ctx context.Context, in *NodeSubscribeInfo, opts ...grpc.CallOption) (*SubscribeOperationReply, error) {
	out := new(SubscribeOperationReply)
	err := c.cc.Invoke(ctx, "/alcor.schema.SubscribeInfoProvisioner/PushNodeSubscribeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeInfoProvisionerServer is the server API for SubscribeInfoProvisioner service.
type SubscribeInfoProvisionerServer interface {
	PushNodeSubscribeInfo(context.Context, *NodeSubscribeInfo) (*SubscribeOperationReply, error)
}

// UnimplementedSubscribeInfoProvisionerServer can be embedded to have forward compatible implementations.
type UnimplementedSubscribeInfoProvisionerServer struct {
}

func (*UnimplementedSubscribeInfoProvisionerServer) PushNodeSubscribeInfo(context.Context, *NodeSubscribeInfo) (*SubscribeOperationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushNodeSubscribeInfo not implemented")
}

func RegisterSubscribeInfoProvisionerServer(s *grpc.Server, srv SubscribeInfoProvisionerServer) {
	s.RegisterService(&_SubscribeInfoProvisioner_serviceDesc, srv)
}

func _SubscribeInfoProvisioner_PushNodeSubscribeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSubscribeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeInfoProvisionerServer).PushNodeSubscribeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alcor.schema.SubscribeInfoProvisioner/PushNodeSubscribeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeInfoProvisionerServer).PushNodeSubscribeInfo(ctx, req.(*NodeSubscribeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeInfoProvisioner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alcor.schema.SubscribeInfoProvisioner",
	HandlerType: (*SubscribeInfoProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushNodeSubscribeInfo",
			Handler:    _SubscribeInfoProvisioner_PushNodeSubscribeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscribeinfoprovisioner.proto",
}
