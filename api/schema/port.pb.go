//
//MIT License
//Copyright(c) 2020 Futurewei Cloud
//
//Permission is hereby granted,
//free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
//including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
//to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: port.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevisionNumber    uint32                                `protobuf:"varint,1,opt,name=revision_number,json=revisionNumber,proto3" json:"revision_number,omitempty"`
	RequestId         string                                `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Id                string                                `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UpdateType        UpdateType                            `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=alcor.schema.UpdateType" json:"update_type,omitempty"` // DELTA (default) or FULL
	VpcId             string                                `protobuf:"bytes,5,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Name              string                                `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	DeviceId          string                                `protobuf:"bytes,7,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceOwner       string                                `protobuf:"bytes,8,opt,name=device_owner,json=deviceOwner,proto3" json:"device_owner,omitempty"`
	MacAddress        string                                `protobuf:"bytes,9,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	AdminStateUp      bool                                  `protobuf:"varint,10,opt,name=admin_state_up,json=adminStateUp,proto3" json:"admin_state_up,omitempty"`
	HostInfo          *PortConfiguration_HostInfo           `protobuf:"bytes,11,opt,name=host_info,json=hostInfo,proto3" json:"host_info,omitempty"`
	FixedIps          []*PortConfiguration_FixedIp          `protobuf:"bytes,12,rep,name=fixed_ips,json=fixedIps,proto3" json:"fixed_ips,omitempty"`
	AllowAddressPairs []*PortConfiguration_AllowAddressPair `protobuf:"bytes,13,rep,name=allow_address_pairs,json=allowAddressPairs,proto3" json:"allow_address_pairs,omitempty"`
	SecurityGroupIds  []*PortConfiguration_SecurityGroupId  `protobuf:"bytes,14,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
}

func (x *PortConfiguration) Reset() {
	*x = PortConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfiguration) ProtoMessage() {}

func (x *PortConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfiguration.ProtoReflect.Descriptor instead.
func (*PortConfiguration) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0}
}

func (x *PortConfiguration) GetRevisionNumber() uint32 {
	if x != nil {
		return x.RevisionNumber
	}
	return 0
}

func (x *PortConfiguration) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PortConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortConfiguration) GetUpdateType() UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateType_DELTA
}

func (x *PortConfiguration) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *PortConfiguration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortConfiguration) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *PortConfiguration) GetDeviceOwner() string {
	if x != nil {
		return x.DeviceOwner
	}
	return ""
}

func (x *PortConfiguration) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *PortConfiguration) GetAdminStateUp() bool {
	if x != nil {
		return x.AdminStateUp
	}
	return false
}

func (x *PortConfiguration) GetHostInfo() *PortConfiguration_HostInfo {
	if x != nil {
		return x.HostInfo
	}
	return nil
}

func (x *PortConfiguration) GetFixedIps() []*PortConfiguration_FixedIp {
	if x != nil {
		return x.FixedIps
	}
	return nil
}

func (x *PortConfiguration) GetAllowAddressPairs() []*PortConfiguration_AllowAddressPair {
	if x != nil {
		return x.AllowAddressPairs
	}
	return nil
}

func (x *PortConfiguration) GetSecurityGroupIds() []*PortConfiguration_SecurityGroupId {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type PortState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType OperationType      `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=alcor.schema.OperationType" json:"operation_type,omitempty"`
	Configuration *PortConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *PortState) Reset() {
	*x = PortState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortState) ProtoMessage() {}

func (x *PortState) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortState.ProtoReflect.Descriptor instead.
func (*PortState) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{1}
}

func (x *PortState) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_INFO
}

func (x *PortState) GetConfiguration() *PortConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type PortConfiguration_HostInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *PortConfiguration_HostInfo) Reset() {
	*x = PortConfiguration_HostInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfiguration_HostInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfiguration_HostInfo) ProtoMessage() {}

func (x *PortConfiguration_HostInfo) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfiguration_HostInfo.ProtoReflect.Descriptor instead.
func (*PortConfiguration_HostInfo) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PortConfiguration_HostInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *PortConfiguration_HostInfo) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type PortConfiguration_FixedIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	IpAddress string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *PortConfiguration_FixedIp) Reset() {
	*x = PortConfiguration_FixedIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfiguration_FixedIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfiguration_FixedIp) ProtoMessage() {}

func (x *PortConfiguration_FixedIp) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfiguration_FixedIp.ProtoReflect.Descriptor instead.
func (*PortConfiguration_FixedIp) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PortConfiguration_FixedIp) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *PortConfiguration_FixedIp) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

type PortConfiguration_AllowAddressPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress  string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *PortConfiguration_AllowAddressPair) Reset() {
	*x = PortConfiguration_AllowAddressPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfiguration_AllowAddressPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfiguration_AllowAddressPair) ProtoMessage() {}

func (x *PortConfiguration_AllowAddressPair) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfiguration_AllowAddressPair.ProtoReflect.Descriptor instead.
func (*PortConfiguration_AllowAddressPair) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PortConfiguration_AllowAddressPair) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *PortConfiguration_AllowAddressPair) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type PortConfiguration_SecurityGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PortConfiguration_SecurityGroupId) Reset() {
	*x = PortConfiguration_SecurityGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConfiguration_SecurityGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConfiguration_SecurityGroupId) ProtoMessage() {}

func (x *PortConfiguration_SecurityGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConfiguration_SecurityGroupId.ProtoReflect.Descriptor instead.
func (*PortConfiguration_SecurityGroupId) Descriptor() ([]byte, []int) {
	return file_port_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PortConfiguration_SecurityGroupId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_port_proto protoreflect.FileDescriptor

var file_port_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x07, 0x0a, 0x11, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x6c,
	0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x12, 0x45, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x09, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x73,
	0x12, 0x60, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x1a, 0x4a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x45, 0x0a,
	0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x52, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x21, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x4b, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x77, 0x65, 0x69, 0x2e, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x42, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x77, 0x65, 0x69, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x6c, 0x63, 0x6f, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_port_proto_rawDescOnce sync.Once
	file_port_proto_rawDescData = file_port_proto_rawDesc
)

func file_port_proto_rawDescGZIP() []byte {
	file_port_proto_rawDescOnce.Do(func() {
		file_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_port_proto_rawDescData)
	})
	return file_port_proto_rawDescData
}

var file_port_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_port_proto_goTypes = []interface{}{
	(*PortConfiguration)(nil),                  // 0: alcor.schema.PortConfiguration
	(*PortState)(nil),                          // 1: alcor.schema.PortState
	(*PortConfiguration_HostInfo)(nil),         // 2: alcor.schema.PortConfiguration.HostInfo
	(*PortConfiguration_FixedIp)(nil),          // 3: alcor.schema.PortConfiguration.FixedIp
	(*PortConfiguration_AllowAddressPair)(nil), // 4: alcor.schema.PortConfiguration.AllowAddressPair
	(*PortConfiguration_SecurityGroupId)(nil),  // 5: alcor.schema.PortConfiguration.SecurityGroupId
	(UpdateType)(0),                            // 6: alcor.schema.UpdateType
	(OperationType)(0),                         // 7: alcor.schema.OperationType
}
var file_port_proto_depIdxs = []int32{
	6, // 0: alcor.schema.PortConfiguration.update_type:type_name -> alcor.schema.UpdateType
	2, // 1: alcor.schema.PortConfiguration.host_info:type_name -> alcor.schema.PortConfiguration.HostInfo
	3, // 2: alcor.schema.PortConfiguration.fixed_ips:type_name -> alcor.schema.PortConfiguration.FixedIp
	4, // 3: alcor.schema.PortConfiguration.allow_address_pairs:type_name -> alcor.schema.PortConfiguration.AllowAddressPair
	5, // 4: alcor.schema.PortConfiguration.security_group_ids:type_name -> alcor.schema.PortConfiguration.SecurityGroupId
	7, // 5: alcor.schema.PortState.operation_type:type_name -> alcor.schema.OperationType
	0, // 6: alcor.schema.PortState.configuration:type_name -> alcor.schema.PortConfiguration
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_port_proto_init() }
func file_port_proto_init() {
	if File_port_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfiguration_HostInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfiguration_FixedIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfiguration_AllowAddressPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConfiguration_SecurityGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_port_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_port_proto_goTypes,
		DependencyIndexes: file_port_proto_depIdxs,
		MessageInfos:      file_port_proto_msgTypes,
	}.Build()
	File_port_proto = out.File
	file_port_proto_rawDesc = nil
	file_port_proto_goTypes = nil
	file_port_proto_depIdxs = nil
}
